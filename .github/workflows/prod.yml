name: Build, Test and Deploy to Prod

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache dependencies to speed up Rust builds
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            app-service/.cargo
            app-service/target/
            auth-service/.cargo
            auth-service/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      # Install Rust toolchain
      - name: Install Rust
        run: rustup update stable && rustup default stable

      # Build and test app-service
      - name: Build and test app-service code
        working-directory: ./app-service
        run: |
          cargo build --verbose
          cargo test --verbose

      # Build and test auth-service
      - name: Build and test auth-service code
        working-directory: ./auth-service
        run: |
          export JWT_SECRET=secret
          cargo build --verbose
          cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Clean Docker build cache (ensures fresh compose definitions)
      - name: Clean Docker build cache
        run: docker builder prune -af || true

      # Build and push Docker images
      - name: Build and push Docker images
        uses: docker/bake-action@v2.3.0
        with:
          push: true
          files: |
            compose.yml
            compose.override.yml
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AUTH_SERVICE_IP: localhost

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout code to ensure compose.yml is present
      - name: Checkout code
        uses: actions/checkout@v2

      # Log in to Docker Hub for pulling images
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Install sshpass for non-interactive SCP/SSH
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # Copy compose.yml to the droplet
      - name: Copy compose.yml to droplet
        run: |
          sshpass -p '${{ secrets.DROPLET_PASSWORD }}' \
          scp -o StrictHostKeyChecking=no compose.yml \
          root@${{ vars.DROPLET_IP }}:~

      # Deploy on the droplet via SSH
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd ~
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export AUTH_SERVICE_IP=${{ vars.DROPLET_IP }}
            docker compose down
            docker compose pull
            docker compose up -d
